#!/bin/bash
#copy file to the last folder in loop
#useage:./mkf-in-loop -f <file> -c <command> -from <from directory>  -to <to directory>
#EX:./mkf-in-loop -f POSCAR -c 0 -from /home/wk/auto/doc  -to /home/wk/auto/test/ads
source environment
source setting

#default
ROOT_DIR=$(pwd)
match=""
file="POSCAR"
command="0"
TO_DIR=$(pwd)

#logging
logging 1 "mkf-in-loop"

#input
while [[ $# -gt 1 ]] ;do 
    case "$1" in 
        -from) ROOT_DIR=$2 
            echo "ROOT_DIR: $ROOT_DIR" >> "$WORK_DIR/logs"
            shift 2 ;;
        -file|-F|-f) file=$2
            echo "file: $file" >> "$WORK_DIR/logs"
            shift 2 ;;  
        -to) TO_DIR=$2
            echo "TO_DIR: $TO_DIR" >> "$WORK_DIR/logs"
            shift 2 ;;
        -match|-M|-m) match=$2
            echo "match: $match" >> "$WORK_DIR/logs"
            shift 2 ;;
        -command|-c|-C) command=$2
            echo "command: $command" >> "$WORK_DIR/logs"
            shift 2 ;;
        --) shift 
            break;; 
        *) echo "$1 is not an option" ;; 
    esac 
   
done

#main
case "$command" in
    #copy file to the TO_DIR 
    0)find "$TO_DIR" -type d | while read TARGET_DIR
        do
            if [ -z "$(find "$TARGET_DIR" -mindepth 1 -type d)" ]; then
                if [[ "$TARGET_DIR" == *"$match"* ]];then
                    cp "$file" "$TARGET_DIR" 2>> $WORK_DIR/errors 1>> $WORK_DIR/logs
                else
                    :
                fi
            fi
        done ;;
    #使两文件夹的文件按一定方式复制
    1)find "$TO_DIR" -type d | while read TARGET_DIR
        do
            if [ -z "$(find "$TARGET_DIR" -mindepth 1 -type d)" ]; then
                if [[ "$TARGET_DIR" == *"$match"* ]];then
                    RELATIVE_PATH="${TARGET_DIR#$TO_DIR}" 2>> $WORK_DIR/errors 1>> $WORK_DIR/logs
                    RELATIVE_PATH="${RELATIVE_PATH#/}" 2>> $WORK_DIR/errors 1>> $WORK_DIR/logs
                    cp "$ROOT_DIR/$RELATIVE_PATH/CONTCAR" "$TARGET_DIR/POSCAR" 2>> $WORK_DIR/errors 1>> $WORK_DIR/logs
                else
                    :
                fi
            fi
        done ;;
    help)
        echo 'this is help'
        ;;
    *) echo "$command is not an option" ;; 
esac

#result
result $? "mkf-in-loop"
