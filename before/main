#!/bin/bash
#the main script(给出一个xsd结构，生成多种元素的vasp输入文件，并运行vasp)
#useage: 
source /home/wk/auto/function/environment
source /home/wk/auto/function/setting

#default
command="0"
ROOT_DIR=$(pwd)
match=""
file="POSCAR"
TO_DIR=$(pwd)
screen="OUTCAR"
job_ID_1=0
job_ID_2=1

#logging
logging 0 

#input
while [[ $# -gt 1 ]] ;do 
    case "$1" in 
        -command|-c|-C) command=$2
            echo "command: $command" >> "$WORK_DIR/logs"
            shift 2 ;;
        -dir|-D|-d) ROOT_DIR=$2 
            echo "ROOT_DIR: $ROOT_DIR" >> "$WORK_DIR/logs"
            shift 2 ;;
        -match|-m|-M) match=$2
            echo "match: $match" >> "$WORK_DIR/logs"
            shift 2 ;;
        -file|-F|-f) file=$2
            echo "file: $file" >> "$WORK_DIR/logs"
            shift 2 ;;
        -to) TO_DIR=$2
            echo "TO_DIR: $TO_DIR" >> "$WORK_DIR/logs"
            shift 2 ;;
        -screen) screen=$2
            echo "screen: $screen" >> "$WORK_DIR/logs"
            shift 2 ;;
        -job) job_ID_1=$2 job_ID_2=$3
            echo "job_ID_1: $job_ID_1" >> "$WORK_DIR/logs"
            echo "job_ID_2: $job_ID_2" >> "$WORK_DIR/logs"
            shift 3 ;;
        --) shift 
            break;; 
        *) echo "$1 is not an option " ;; 
    esac 
done

#main
main(){
    case "$command" in 
        #执行批量vasp的流程
        0)  echo "command: 执行批量vasp的流程" >> "$WORK_DIR/logs"
            echo "pos-to-all" 
            $script_dir/before/pos-to-all -f ${file} -to ${TO_DIR} -match ${match}
            echo "pot-to-all"
            $script_dir/before/pot-to-all -to ${TO_DIR} -match ${match}
            echo "mkf-in-loop"
            for i in INCAR KPOINTS vasp.sbatch
              do
                $script_dir/before/mkf-in-loop -f $script_dir/doc/$i -c 0 -from ${ROOT_DIR}  -to ${TO_DIR} -match ${match}
              done
            echo "run"
            $script_dir/before/run -dir ${TO_DIR} -match ${match} 
            ;;
        #执行vasp计算结果检查的流程
        1)  echo "command: 执行vasp计算结果检查的流程" >> "$WORK_DIR/logs" 
            $script_dir/after/check-res -dir ${ROOT_DIR} -file ${file}  
            ;;
        #执行数据提取的流程 
        2)  echo "command: 执行数据提取的流程" >> "$WORK_DIR/logs" 
            $script_dir/after/deal-data -f ${file}  -dir ${ROOT_DIR}  -to ${TO_DIR}
            ;;
        #执行文件提取的流程
        3)  echo "command: 执行文件提取的流程" >> "$WORK_DIR/logs" 
            $script_dir/after/copy-file -f ${file} -to ${TO_DIR} -dir ${ROOT_DIR} -command 0 -match ${match}
            ;;
        #执行bader的流程
        4)  echo "command: 执行bader的流程" >> "$WORK_DIR/logs"
            $script_dir/after/bader-data -dir ${ROOT_DIR}
            ;;
        #执行删除的流程
        5)  echo "command: 执行删除的流程" >> "$WORK_DIR/logs"
            $script_dir/after/del -f ${file} -dir ${ROOT_DIR}
            ;;
        #执行取消任务的流程
        6)  echo "command: 执行取消任务的流程" >> "$WORK_DIR/logs"
            $script_dir/before/scancel  ${job_ID1} ${job_ID2}
            ;;
        #help
        help)
            echo 'this is help' 
            ;;
        
        *) echo "command: $command is not defined" ;;
    esac 
}
main

#result
printf '=%.0s' {1..50} >> "$WORK_DIR/results"
echo >>"$WORK_DIR/results"
result $? "main"


