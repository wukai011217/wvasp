#!/bin/bash
#
# 文件名: functions
# 描述: 共享函数和变量库
# 位置: $SCRIPT_DIR/function/functions
# 版本: 1.0.0
# 日期: 2025-02-24

#==============================================================================
# 初始化
#==============================================================================

# 加载配置
. config_file || {
    echo "Error: Failed to load config_file" >&2
    return 1
}

#==============================================================================
# 全局变量
#==============================================================================

# 统计信息
declare -A STATS=(
    [total]=0       # 总文件数
    [processed]=0   # 处理成功数
    [skipped]=0     # 跳过文件数
    [failed]=0      # 失败文件数
    [backup]=0      # 备份文件数
    [copied]=0      # 复制文件数
    [deleted]=0     # 删除文件数
    [success]=0     # 成功文件数
)

# 元素列表
# 按周期表顺序排列，每行12个元素
declare -a ELEMENTS=(
    Mg Al Ca Sc Ti V  Cr Mn Fe Co Ni Cu
    Zn Ga Ge Sr Y  Zr Nb Mo Tc Ru Rh Pd
    Ag Cd In Sn Sb Ba Ce Hf Ta W  Re Os
    Ir Pt Au Hg Tl Pb Bi
)

#==============================================================================
# 统计信息管理
#==============================================================================

# 函数: reset_stats
# 描述: 重置统计信息
# 参数: 无
# 返回: 无
reset_stats() {
    for key in "${!STATS[@]}"; do
        STATS[$key]=0
    done
}

# 函数: update_stats
# 描述: 更新统计信息
# 参数: $1 - 统计项目名称
#   $2 - [可选]增加值，默认1
# 返回: 0=成功
update_stats() {
    local key="$1"
    local value="${2:-1}"
    
    # 检查统计项目是否有效
    if [[ ! "${STATS[$key]+isset}" ]]; then
        logging 2 "Invalid stats key: $key"
        return 0
    fi
    
    # 更新值
    STATS[$key]=$((STATS[$key] + value))
    
    # 输出调试信息
    [[ "${CONFIG[verbose]}" == true ]] && \
        logging 1 "Stats update: $key = ${STATS[$key]}"
    
    return 0
}

# 函数: show_stats
# 描述: 显示统计信息
# 参数: $1 - 处理时间（秒）
# 返回: 0=成功
show_stats() {
    local duration="$1"
    
    # 检查输入
    if [[ -z "$duration" ]] || ! [[ "$duration" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
        logging 2 "Invalid duration: $duration"
        return 0
    fi
    
    # 显示统计信息
    logging 0 "Statistics"
    logging 1 "  Total files processed:     ${STATS[total]:-0}"
    logging 1 "  Successfully processed:    ${STATS[processed]:-0}"
    logging 1 "  Failed operations:         ${STATS[failed]:-0}"
    
    if [[ "${STATS[skipped]:-0}" -gt 0 ]]; then
        logging 1 "  Skipped files:            ${STATS[skipped]}"
    fi
    
    if [[ "${STATS[backup]:-0}" -gt 0 ]]; then
        logging 1 "  Backups created:          ${STATS[backup]}"
    fi
    
    logging 1 "  Processing time:          ${duration}s"
    
    return 0
}

#==============================================================================
# 日志和错误处理
#==============================================================================

# 函数: logging
# 描述: 记录日志信息
# 参数: $1 - 日志级别（0=分隔符，1=信息，2=错误）
#   $2 - 日志消息
# 返回: 0=成功, 1=失败
logging() {
    local level="$1"
    local message="$2"
    local timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    
    # 检查日志目录是否存在
    if [[ ! -d "${PATHS[log_dir]}" ]]; then
        mkdir -p "${PATHS[log_dir]}" || {
            echo "Failed to create log directory: ${PATHS[log_dir]}" >&2
            return 1
        }
    fi
    
    case "${level}" in
        0)  # 分隔符
            echo "===============================================================" >> "${PATHS[log_dir]}/logs"
            echo "$timestamp" >> "${PATHS[log_dir]}/logs"
            ;;
        1)  # 信息
            echo "[$timestamp] [INFO] $message" >> "${PATHS[log_dir]}/logs"
            ;;
        2)  # 错误
            echo "[$timestamp] [ERROR] $message" >> "${PATHS[log_dir]}/logs"
            echo "[$timestamp] [ERROR] $message" >&2
            ;;
        *)
            echo "[$timestamp] [ERROR] Invalid log level: $level" >&2
            return 1
            ;;
    esac
    
    return 0
}

# 函数: validate_poscar
# 描述: 验证POSCAR格式
# 参数: $1 - POSCAR文件路径
# 返回: 0=成功
validate_poscar() {
    local poscar_file="$1"
    
    # 检查文件存在和权限
    check_path "$poscar_file" "file" || return 0
    
    # 检查文件格式
    if file "$poscar_file" | grep -q "CRLF"; then
        if [[ "${CONFIG[verbose]}" == true ]]; then
            logging 1 "Converting CRLF to LF in: $poscar_file"
        fi
        if ! dos2unix "$poscar_file" 2>> "${PATHS[log_dir]}/logs"; then
            logging 2 "Failed to convert line endings in: $poscar_file"
            return 0
        fi
    fi
    
    # 检查文件是否至少8行
    if [[ $(wc -l < "$poscar_file") -lt 8 ]]; then
        logging 2 "POSCAR file is too short: $poscar_file"
        return 0
    fi
    
    # 检查第2行（scaling factor）
    if ! awk 'NR==2 {exit !($1+0==$1)}' "$poscar_file"; then
        logging 2 "Line 2 (scaling factor) must be a number in: $poscar_file"
        return 0
    fi
    
    # 检查第3-5行（晶格向量）
    for i in {3..5}; do
        if ! awk -v line=$i 'NR==line {exit !(NF==3 && $1+0==$1 && $2+0==$2 && $3+0==$3)}' "$poscar_file"; then
            logging 2 "Line $i must contain 3 numbers (lattice vectors) in: $poscar_file"
            return 0
        fi
    done
    
    # 检查第6行（元素名称）
    if ! awk 'NR==6 {exit (NF==0)}' "$poscar_file"; then
        logging 2 "Line 6 must contain element names in: $poscar_file"
        return 0
    fi
    
    # 检查第7行（元素数量）
    if ! awk 'NR==6{elements=NF} NR==7{exit !(NF==elements && $1+0==$1)}' "$poscar_file"; then
        logging 2 "Line 7 must contain the same number of integers as elements in line 6 in: $poscar_file"
        return 0
    fi
    
    # 检查坐标类型（Direct/Cartesian）
    if ! awk 'NR==8{if($0~/^[Ss]elective[[:space:]]*[Dd]ynamics/){next} else{coord=$0}} NR==9{if(NR==9 && coord==""){coord=$0}} END{exit !(coord~/^[Dd]irect/ || coord~/^[Cc]artesian/)}' "$poscar_file"; then
        logging 2 "Coordinates must be specified as either Direct or Cartesian in: $poscar_file"
        return 0
    fi
    
}

#==============================================================================
# 文件和目录管理
#==============================================================================

# 函数: check_path
# 描述: 检查路径是否存在及其类型
# 参数: $1 - 路径
#   $2 - 类型（file 或 directory）
#   $3 - [可选]检查目录是否为空（仅当 type 为 directory 时有效）
#   $4 - [可选]检查目录是否匹配模式（仅当 type 为 directory 时有效）
# 返回: 0=成功
check_path() {
    local path="$1"
    local type="$2"
    local check_empty="${3:-false}"
    local check_pattern="${4:-}"
    
    # 检查输入
    if [[ -z "$path" ]]; then
        logging 2 "Empty path"
        return 0
    fi
    
    if [[ ! "$type" =~ ^(file|directory)$ ]]; then
        logging 2 "Invalid type: $type"
        return 0
    fi
    
    case "$type" in
        file)
            if [[ ! -f "$path" ]]; then
                logging 2 "File does not exist: $path"
                return 0
            fi
            if [[ ! -r "$path" ]]; then
                logging 2 "File not readable: $path"
                return 0
            fi
            ;;
        directory)
            if [[ ! -d "$path" ]]; then
                logging 2 "Directory does not exist: $path"
                return 0
            fi
            if [[ ! -w "$path" ]]; then
                logging 2 "Directory not writable: $path"
                return 0
            fi
            
            # 检查目录是否为空
            if [[ "$check_empty" == true ]] && [ ! -z "$(find "$path" -mindepth 1 -type d)" ]; then
                logging 1 "Skipping non-empty directory: $path"
                update_stats "skipped"
                return 1
            fi
            
            # 检查目录是否匹配模式
            if [[ -n "$check_pattern" ]] && [[ ! "$path" == *"$check_pattern"* ]]; then
                logging 1 "Directory does not match pattern: $path"
                update_stats "skipped"
                return 1
            fi
            ;;
    esac
}


# 函数: create_backup
# 描述: 创建文件备份
# 参数: $1 - 要备份的文件路径
# 返回: 0=成功
create_backup() {
    local file="$1"
    
    # 检查输入
    if [[ -z "$file" ]]; then
        logging 2 "Empty file path"
        return 0
    fi
    
    # 检查源文件
    if ! check_path "$file" "file"; then
        return 0
    fi
    
    # 生成备份文件名
    local backup="${file}.bak"
    local counter=1
    
    while [[ -f "$backup" ]]; do
        backup="${file}.bak.${counter}"
        ((counter++))
    done
    
    # 创建备份
    if cp "$file" "$backup" 2>> "${PATHS[log_dir]}/logs"; then
        update_stats "backup"
        logging 1 "Created backup: $backup"
    else
        logging 2 "Failed to create backup: $backup"
    fi
    
    return 0
}

# 函数: check_file_format
# 描述: 检查文件格式是否符合linux要求
# 参数: $1 - 要检查的文件路径
# 返回: 0=成功
check_file_format() {
    local file="$1"
    
    # 检查输入
    if [[ -z "$file" ]]; then
        logging 2 "Empty file path"
        return 0
    fi
    
    # 检查文件
    if ! check_path "$file" "file"; then
        return 0
    fi
    
    # 检查文件格式
    local has_windows_format=false
    
    # 检查 CRLF 行尾
    if file "$file" | grep -q "CRLF"; then
        logging 2 "File contains CRLF line endings: $file"
        has_windows_format=true
    fi
    
    # 检查 ^M 字符
    if grep -l $'\r' "$file" &>/dev/null; then
        logging 2 "File contains Windows-style line endings: $file"
        has_windows_format=true
    fi
    
    return 0
}

#==============================================================================
# 配置检查和显示
#==============================================================================

# 函数: check_config_and_display
# 描述: 检查目标目录并显示配置模式
# 参数: 无
# 返回: 0=成功
check_config_and_display() {
    local target_dir="${CONFIG[to_dir]}"
    
    # 检查目标目录
    if ! check_path "$target_dir" "directory"; then
        logging 2 "${CONFIG[source_file]} : Target directory $target_dir does not exist"
        echo "${CONFIG[source_file]} : Target directory $target_dir does not exist"
        return 0
    fi

    # 显示模式警告
    if [[ "${CONFIG[dry_run]}" == true ]]; then
        echo  "${CONFIG[source_file]} : Running in DRY RUN mode - no files will be modified"
    fi
    
    [[ ${CONFIG[verbose]+x} ]] && [[ "${CONFIG[verbose]}" == true ]] && \
        echo "${CONFIG[source_file]} : Verbose mode enabled"
    
    [[ ${CONFIG[backup]+x} ]] && [[ "${CONFIG[backup]}" != true ]] && \
        echo "${CONFIG[source_file]} : Backup disabled - files will be modified without backup"

    return 0
}

#==============================================================================
# 清理和退出处理
#==============================================================================

# 函数: cleanup
# 描述: 清理临时文件并记录结果
# 参数: 无
# 返回: 无
cleanup() {
    local exit_code=$?
    local target_dir="${CONFIG[to_dir]}"
    
    # 删除临时文件
    if [[ -d "$target_dir" ]]; then
        local tmp_files=()
        while IFS= read -r -d $'\0' file; do
            tmp_files+=("$file")
        done < <(find "$target_dir" -name "*.tmp" -type f -print0 2>/dev/null)
        
        if [[ ${#tmp_files[@]} -gt 0 ]]; then
            logging 2 "Cleaning up ${#tmp_files[@]} temporary files"
            for file in "${tmp_files[@]}"; do
                rm -f "$file" 2>/dev/null || logging 2 "Failed to remove temporary file: $file"
            done
        fi
    fi
    
    exit $exit_code
}

# 函数: signal_handler
# 描述: 处理信号中断
# 参数: 无
# 返回: 无
signal_handler() {
    local signal_name="${1:-UNKNOWN}"
    logging 2 "Operation interrupted by signal: $signal_name"
    cleanup
    exit 0
}

# 函数: initialize
# 描述: 初始化环境和配置
# 参数: 无
# 返回: 0=成功
initialize() {
    # 设置退出和信号处理
    trap cleanup EXIT
    trap 'signal_handler SIGINT' INT
    trap 'signal_handler SIGTERM' TERM
    
    # 初始化日志
    logging 0 "Initializing..."
    echo "${CONFIG[source_file]} : version $VERSION"
    
    # 检查必要的命令
    local required_commands=(awk sed find mv cp mkdir dos2unix)
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            log_exit "Required command not found: $cmd"
        fi
    done
    
    return 0
}

# 函数: log_environment
# 描述: 记录当前运行环境信息
# 参数: 无
# 返回: 0=成功
log_environment() {
    logging 1 "Environment:"
    
    # 记录基本信息
    local env_info=()
    env_info+=("Working Directory:$(pwd)")
    [[ ${CONFIG[to_dir]+x} ]] && env_info+=("Target Directory:${CONFIG[to_dir]}")
    [[ ${CONFIG[command]+x} ]] && env_info+=("Command:${CONFIG[command]}")
    [[ ${CONFIG[match]+x} ]] && env_info+=("Match Pattern:${CONFIG[match]}")
    
    # 记录配置标志
    local config_flags=()
    [[ ${CONFIG[dry_run]+x} ]] && config_flags+=("Dry Run:${CONFIG[dry_run]}")
    [[ ${CONFIG[backup]+x} ]] && config_flags+=("Backup:${CONFIG[backup]}")
    [[ ${CONFIG[verbose]+x} ]] && config_flags+=("Verbose:${CONFIG[verbose]}")
    
    # 输出信息
    for info in "${env_info[@]}"; do
        logging 1 "  - ${info/:/ }"
    done
    
    for flag in "${config_flags[@]}"; do
        logging 1 "  - ${flag/:/ }"
    done
    
    return 0
}


# 如果直接执行此文件，显示用法说明
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    cat << EOF
===============================================================================
                              Functions Library
===============================================================================

Usage:
    source functions

Description:
    A shared library providing common functions and variables for VASP processing
    scripts. This file must be sourced, not executed directly.

Core Functions:
    reset_stats()        - Reset all statistics counters
    update_stats()       - Update specific statistics counter
    show_stats()        - Display current statistics
    logging()           - Log messages (0=Separator, 1=Info, 2=Error)

Validation Functions:
    validate_poscar()   - Validate POSCAR/CONTCAR file format
    check_path()        - Verify path existence and type
    check_file_format() - Check file format and encoding

File Management:
    create_backup()     - Create backup of specified file
    cleanup()           - Clean temporary files and logs

Global Variables:
    STATS              - Associative array for statistics
    ELEMENTS           - Array of supported chemical elements
    PATHS              - Associative array for important paths
    CONFIG             - Associative array for configuration

Example Usage:
    source functions
    
    # Initialize and configure
    initialize
    
    # Process files with logging
    logging 1 "Starting VASP file processing"
    validate_poscar "CONTCAR"
    
    # Show final statistics
    show_stats 10.5
    
For detailed documentation, see the comments in the source code.
EOF
    exit 0
fi
